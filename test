MISSING_ADRESS("I1"),
	INCOMPLETE_ADRESS("I2"),
	EMAIL_FAX_PHNE_MISSING("I3"),
	NAME_FIRSTNAME_BIRTHDATE_MISSING("I4");
	
	private String code;

	private IdentiyAnomaly(String code) {
		this.code = code;
	}

	public String getCode() {
		return code;
	}

	public static IdentiyAnomaly forCode(String code) {
		for (IdentiyAnomaly codeField : values()) {
			if (codeField.getCode().equals(code)) {
				return codeField;
			}
		}
		throw new IllegalArgumentException("Unexpected code " + code);
	}
  
  
	@Column(name = "ANOMALY_TYPE")
	private AnomalyType anomalyType;
	
	@Column(name = "ANOMALY_CODE")
	private String codeAnomaly;
	
	@Column(name = "ANOMALY_STATUS")
	private AnomalyStatus anomalyStatus;
	
	
	@Column(name = "ANOMALY_HANDLING_DATE")
	@Temporal(TemporalType.TIMESTAMP)
	private Date anomalyHandlingDate;
  
  
  
	@ManyToOne
	@JoinColumn(name="CAMPAIGN_ID")
	private Campaign campaign;
  
  @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
	private Set<CompensationAmount> compensationAmounts;
  
  
  @Entity
@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)

@ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "ACCOUNT_COMPENSATION_FILE", 
             joinColumns = { @JoinColumn(name = "COMPENSATION_FILE_ID") }, 
             inverseJoinColumns = { @JoinColumn(name = "ACCOUNT_ID") })
	private List<Account> accounts;

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
	private List<IdentityEntity> identityEntity;
  
  	@ManyToMany(mappedBy="accounts")
	private List<CompensationFile>  compFile;  
	
	@PreUpdate
    public void preUpdate() {
		modificationDate = new Date();
    }
     
    @PrePersist
    public void prePersist() {
        Date now = new Date();
        creationDate = now;
    }
